import unittest
from funcs import *

class Tests(unittest.TestCase):
    def test_square_length_check(self):
        non_square_puzzle = ['1', '2', '3', '4', 0]
        with self.assertRaises(ValueError):
            bad = Puzzle(non_square_puzzle)

    def test_row_checker(self):
        bad_input = [
            0,0,0,0,0,0,0,0,0,
            0,0,'7',0,0,0,0,0,'3',
            0,0,9,0,'8','6','1','9',0,  # two 9's, index 20
            '1',0,'2',0,0,0,0,0,0,
            0,'7',0,'5',0,0,0,0,0,
            0,0,'5','7',0,0,0,'2','9',
            0,0,'9',0,0,'1',0,0,0,
            0,'3','1',0,'2','8','5','7',0,
            '2',0,0,'3',0,0,0,0,'8'
            ]
        good_input = [
            0,0,0,0,0,0,0,0,0,
            0,0,'7',0,0,0,0,0,'3',
            0,0,3,0,'8','6','1','9',0,  # first 3, index 20
            '1',0,'2',0,0,0,0,0,0,
            0,'7',0,'5',0,0,0,0,0,
            0,0,'5','7',0,0,0,'2','9',
            0,0,'9',0,0,'1',0,0,0,
            0,'3','1',0,'2','8','5','7',0,
            '2',0,0,'3',0,0,0,0,'8'
            ]
        bad_puzzle = Puzzle(bad_input)
        good_puzzle = Puzzle(good_input)
        self.assertFalse(bad_puzzle.row_checker(20))
        self.assertTrue(good_puzzle.row_checker(20))

    def test_column_checker(self):
        bad_input = [
            0,0,0,0,0,0,0,0,0,
            0,0,'7',0,0,0,0,0,'3',
            0,0,7,0,'8','6','1','9',0,  # two 7's, index 20
            '1',0,'2',0,0,0,0,0,0,
            0,'7',0,'5',0,0,0,0,0,
            0,0,'5','7',0,0,0,'2','9',
            0,0,'9',0,0,'1',0,0,0,
            0,'3','1',0,'2','8','5','7',0,
            '2',0,0,'3',0,0,0,0,'8'
            ]
        good_input = [
            0,0,0,0,0,0,0,0,0,
            0,0,'7',0,0,0,0,0,'3',
            0,0,3,0,'8','6','1','9',0,  # first 3, index 20
            '1',0,'2',0,0,0,0,0,0,
            0,'7',0,'5',0,0,0,0,0,
            0,0,'5','7',0,0,0,'2','9',
            0,0,'9',0,0,'1',0,0,0,
            0,'3','1',0,'2','8','5','7',0,
            '2',0,0,'3',0,0,0,0,'8'
            ]
        bad_puzzle = Puzzle(bad_input)
        good_puzzle = Puzzle(good_input)
        self.assertFalse(bad_puzzle.column_checker(20))
        self.assertTrue(good_puzzle.column_checker(20))

    def test_box_checker(self):
        bad_input = [
            0,0,0,0,0,0,0,0,0,
            0,0,'7',0,0,0,0,0,'3',
            0,0,0,0,'8','6','1','9',0,
            '1',0,'2',0,0,7,0,0,0,  # two 7's, index 32
            0,'7',0,'5',0,0,0,0,0,
            0,0,'5','7',0,0,0,'2','9',
            0,0,'9',0,0,'1',0,0,0,
            0,'3','1',0,'2','8','5','7',0,
            '2',0,0,'3',0,0,0,0,'8'
            ]
        good_input = [
            0,0,0,0,0,0,0,0,0,
            0,0,'7',0,0,0,0,0,'3',
            0,0,3,0,'8','6','1','9',0,
            '1',0,'2',0,0,0,0,0,0,  # first 6, index 32
            0,'7',0,'5',0,0,0,0,0,
            0,0,'5','7',0,0,0,'2','9',
            0,0,'9',0,0,'1',0,0,0,
            0,'3','1',0,'2','8','5','7',0,
            '2',0,0,'3',0,0,0,0,'8'
            ]
        bad_puzzle = Puzzle(bad_input)
        good_puzzle = Puzzle(good_input)
        self.assertFalse(bad_puzzle.box_checker(32))
        self.assertTrue(good_puzzle.box_checker(32))
        
    def test_solve_output_check(self):
        good_input = [
            0,0,0,0,0,0,0,0,0,
            0,0,'7',0,0,0,0,0,'3',
            0,0,0,0,'8','6','1','9',0,
            '1',0,'2',0,0,0,0,0,0,
            0,'7',0,'5',0,0,0,0,0,
            0,0,'5','7',0,0,0,'2','9',
            0,0,'9',0,0,'1',0,0,0,
            0,'3','1',0,'2','8','5','7',0,
            '2',0,0,'3',0,0,0,0,'8'
            ]
        good_output = [
            8,9,4,1,7,3,6,5,2,
            6,1,'7',2,9,5,4,8,'3',
            5,2,3,4,'8','6','1','9',7,
            '1',4,'2',8,3,9,7,6,5,
            9,'7',8,'5',6,2,3,4,1,
            3,6,'5','7',1,4,8,'2','9',
            7,8,'9',6,5,'1',2,3,4,
            4,'3','1',9,'2','8','5','7',6,
            '2',5,6,'3',4,7,9,1,'8'
            ]
        puzzle = Puzzle(good_input)
        self.assertEqual(puzzle.solve(), good_output)

if __name__ == '__main__':
    unittest.main()
